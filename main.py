from fastapi import FastAPI, Request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler, ContextTypes
)
from yookassa import Configuration, Payment
import uuid
import asyncio
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ÆKassa
Configuration.account_id = os.getenv("YOOKASSA_ACCOUNT_ID", "—Ç–≤–æ–π_id")
Configuration.secret_key = os.getenv("YOOKASSA_SECRET_KEY", "—Ç–≤–æ–π_secret_key")

BOT_TOKEN = os.getenv("BOT_TOKEN", "—Ç–≤–æ–π_telegram_token")

# FastAPI
app = FastAPI()

# Telegram Application
telegram_app = Application.builder().token(BOT_TOKEN).build()

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏
def create_payment_link(amount_rub: int, description: str, return_url: str, telegram_user_id: int) -> str:
    payment = Payment.create({
        "amount": {
            "value": f"{amount_rub}.00",
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": return_url
        },
        "capture": True,
        "description": description,
        "metadata": {
            "telegram_user_id": telegram_user_id
        }
    }, idempotence_key=str(uuid.uuid4()))
    return payment.confirmation.confirmation_url

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —è —Å–æ–±—Ä–∞–ª–∞ —Å–≤–æ–∏ –∞–≤—Ç–æ—Ä—Å–∫–∏–µ –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏ üíÜ‚Äç‚ôÄÔ∏è\n\n"
        "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —É—Ä–æ–∫ –∏ –Ω–∞—á–Ω–∏ –∑–∞–±–æ—Ç—É –æ —Å–µ–±–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚ú®"
    )
    keyboard = [[InlineKeyboardButton("–°–º–æ—Ç—Ä–µ—Ç—å —É—Ä–æ–∫–∏", callback_data="show_lessons")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text, reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "show_lessons":
        text = "*–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤‚ú®*\n‚ñ´Ô∏è–¢–ï–ô–ü–´ –ü–†–û–¢–ò–í –û–¢–Å–ö–û–í"
        keyboard = [[InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —É—Ä–æ–∫ ‚úÖ", callback_data="lesson_1")]]
        await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")

    elif query.data == "lesson_1":
        caption = "*–ß—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç –≤ —É—Ä–æ–∫–µ?*\n\n" \
                  "‚úîÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–∂–∏\n‚úîÔ∏è –ê–ø–ø–ª–∏–∫–∞—Ü–∏—è\n‚úîÔ∏è –ù–∞–Ω–µ—Å–µ–Ω–∏–µ\n‚úîÔ∏è –≠—Ñ—Ñ–µ–∫—Ç\n\n" \
                  "*–°—Ç–æ–∏–º–æ—Å—Ç—å:* 1000 —Ä—É–±–ª–µ–π."
        keyboard = [
            [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å ‚úÖ", callback_data="pay")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="show_lessons")]
        ]
        await query.message.reply_photo(
            photo=open("lesson1.jpg", "rb"),
            caption=caption,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )

    elif query.data == "pay":
        url = create_payment_link(
            amount_rub=1000,
            description="–£—Ä–æ–∫: –¢–µ–π–ø—ã –ø—Ä–æ—Ç–∏–≤ –æ—Ç—ë–∫–æ–≤",
            return_url="https://t.me/natural_face_bot",
            telegram_user_id=query.from_user.id
        )
        await query.message.reply_text(f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{url}", disable_web_page_preview=True)

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä—ã
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CallbackQueryHandler(button_handler))

# –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç –∫–∞–∫ —Ñ–æ–Ω –∑–∞–¥–∞—á—É
@app.on_event("startup")
async def startup_event():
    asyncio.create_task(telegram_app.run_polling())

# –ÆKassa Webhook
@app.post("/yookassa/webhook")
async def handle_webhook(request: Request):
    payload = await request.json()
    print("Webhook –æ—Ç –ÆKassa:", payload)
    return {"status": "ok"}
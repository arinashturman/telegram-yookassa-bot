import os
import uuid
from fastapi import FastAPI, Request
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from yookassa import Configuration, Payment

app = FastAPI()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã
BOT_TOKEN = os.getenv("BOT_TOKEN")
YOOKASSA_ACCOUNT_ID = os.getenv("YOOKASSA_ACCOUNT_ID")
YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")

if not all([BOT_TOKEN, YOOKASSA_ACCOUNT_ID, YOOKASSA_SECRET_KEY]):
    raise RuntimeError("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã: BOT_TOKEN, YOOKASSA_ACCOUNT_ID –∏–ª–∏ YOOKASSA_SECRET_KEY")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ÆKassa
Configuration.account_id = YOOKASSA_ACCOUNT_ID
Configuration.secret_key = YOOKASSA_SECRET_KEY

# –°–æ–∑–¥–∞—ë–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
telegram_app = Application.builder().token(BOT_TOKEN).build()

@app.post("/webhook")
async def telegram_webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, telegram_app.bot)
    await telegram_app.process_update(update)
    return {"ok": True}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–°–º–æ—Ç—Ä–µ—Ç—å —É—Ä–æ–∫–∏", callback_data="show_lessons")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —è —Å–æ–±—Ä–∞–ª–∞ —Å–≤–æ–∏ –∞–≤—Ç–æ—Ä—Å–∫–∏–µ –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏ üíÜ‚Äç‚ôÄÔ∏è\n\n"
        "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —É—Ä–æ–∫ –∏ –Ω–∞—á–Ω–∏ –∑–∞–±–æ—Ç—É –æ —Å–µ–±–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚ú®",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "show_lessons":
        keyboard = [[InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —É—Ä–æ–∫ ‚úÖ", callback_data="lesson_1")]]
        await query.message.reply_text(
            "*–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤‚ú®*\n‚ñ´Ô∏è–¢–ï–ô–ü–´ –ü–†–û–¢–ò–í –û–¢–Å–ö–û–í",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )

    elif query.data == "lesson_1":
        caption = (
            "*–ß—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç –≤ —É—Ä–æ–∫–µ?*\n\n"
            "‚úîÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–∂–∏\n‚úîÔ∏è –ê–ø–ø–ª–∏–∫–∞—Ü–∏—è\n‚úîÔ∏è –ù–∞–Ω–µ—Å–µ–Ω–∏–µ\n‚úîÔ∏è –≠—Ñ—Ñ–µ–∫—Ç\n\n"
            "*–°—Ç–æ–∏–º–æ—Å—Ç—å:* 1000 —Ä—É–±–ª–µ–π."
        )
        keyboard = [
            [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å ‚úÖ", callback_data="pay")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="show_lessons")]
        ]
        await query.message.reply_photo(
            photo=open("lesson1.jpg", "rb"),
            caption=caption,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode="Markdown"
        )

    elif query.data == "pay":
        try:
            url = create_payment_link(
                amount_rub=1000,
                description="–£—Ä–æ–∫: –¢–µ–π–ø—ã –ø—Ä–æ—Ç–∏–≤ –æ—Ç—ë–∫–æ–≤",
                return_url="https://t.me/–¢–í–û–ô_–Æ–ó–ï–†–ù–ï–ô–ú_–ë–û–¢–ê",  # –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∑–∞–º–µ–Ω–∏
                telegram_user_id=query.from_user.id
            )
            await query.message.reply_text(f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{url}", disable_web_page_preview=True)
        except Exception as e:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç—ã:", e)
            await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ –æ–ø–ª–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def create_payment_link(amount_rub, description, return_url, telegram_user_id):
    payment = Payment.create({
        "amount": {
            "value": f"{amount_rub}.00",
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": return_url
        },
        "capture": True,
        "description": description,
        "metadata": {
            "telegram_user_id": telegram_user_id
        }
    }, idempotency_key=str(uuid.uuid4()))
    return payment.confirmation.confirmation_url

telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CallbackQueryHandler(button_handler))
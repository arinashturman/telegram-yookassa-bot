import os
import uuid
import logging
from fastapi import FastAPI, Request, BackgroundTasks
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from yookassa import Configuration, Payment

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å—Ä–µ–¥—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
def load_env():
    BOT_TOKEN = os.getenv("BOT_TOKEN")
    YOOKASSA_ACCOUNT_ID = os.getenv("YOOKASSA_ACCOUNT_ID")
    YOOKASSA_SECRET_KEY = os.getenv("YOOKASSA_SECRET_KEY")

    if not all([BOT_TOKEN, YOOKASSA_ACCOUNT_ID, YOOKASSA_SECRET_KEY]):
        raise RuntimeError("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å—Ä–µ–¥—ã: BOT_TOKEN, YOOKASSA_ACCOUNT_ID –∏–ª–∏ YOOKASSA_SECRET_KEY")

    Configuration.account_id = YOOKASSA_ACCOUNT_ID
    Configuration.secret_key = YOOKASSA_SECRET_KEY
    return BOT_TOKEN

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
BOT_TOKEN = load_env()
telegram_app = Application.builder().token(BOT_TOKEN).build()
app = FastAPI()

@app.on_event("startup")
async def startup_event():
    await telegram_app.initialize()
    logger.info("‚úÖ Telegram bot initialized.")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ Webhook Telegram ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        update = Update.de_json(data, telegram_app.bot)
        await telegram_app.process_update(update)
    except Exception as e:
        logger.error("–û—à–∏–±–∫–∞ –≤ webhook: %s", e)
    return {"ok": True}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ö–æ–º–∞–Ω–¥–∞ /start ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [[InlineKeyboardButton("–°–º–æ—Ç—Ä–µ—Ç—å —É—Ä–æ–∫–∏", callback_data="show_lessons")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –ó–¥–µ—Å—å —è —Å–æ–±—Ä–∞–ª–∞ —Å–≤–æ–∏ –∞–≤—Ç–æ—Ä—Å–∫–∏–µ –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏ üíÜ‚Äç‚ôÄÔ∏è\n\n"
        "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —É—Ä–æ–∫ –∏ –Ω–∞—á–Ω–∏ –∑–∞–±–æ—Ç—É –æ —Å–µ–±–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚ú®",
        reply_markup=reply_markup
    )

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    try:
        if query.data == "show_lessons":
            keyboard = [[InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —É—Ä–æ–∫ ‚úÖ", callback_data="lesson_1")]]
            await query.message.reply_text(
                "*–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤‚ú®*\n‚ñ´Ô∏è–¢–ï–ô–ü–´ –ü–†–û–¢–ò–í –û–¢–Å–ö–û–í",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode="Markdown"
            )

        elif query.data == "lesson_1":
            caption = (
                "*–ß—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç –≤ —É—Ä–æ–∫–µ?*\n\n"
                "‚úîÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–∂–∏ –∫ —Ç–µ–π–ø–∏—Ä–æ–≤–∞–Ω–∏—é\n"
                "‚úîÔ∏è –ú–µ—Ä—ã –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏ –∏ –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç –Ω–∞ –∞–ª–ª–µ—Ä–≥–∏—é\n"
                "‚úîÔ∏è –ö–∞–∫ –≤—ã—Ä–µ–∑–∞—Ç—å –∞–ø–ø–ª–∏–∫–∞—Ü–∏—é –æ—Ç –æ—Ç—ë–∫–æ–≤\n"
                "‚úîÔ∏è –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –Ω–∞–Ω–µ—Å–µ–Ω–∏—è —Ç–µ–π–ø–æ–≤\n"
                "‚úîÔ∏è –°–∫–æ–ª—å–∫–æ –Ω–æ—Å–∏—Ç—å —Ç–µ–π–ø—ã, —á—Ç–æ–±—ã –±—ã–ª —ç—Ñ—Ñ–µ–∫—Ç\n"
                "‚úîÔ∏è –ö–∞–∫ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Å–Ω—è—Ç—å –∞–ø–ø–ª–∏–∫–∞—Ü–∏—é, –Ω–µ –ø–æ–≤—Ä–µ–¥–∏–≤ –∫–æ–∂—É\n\n"
                "*üé• –¢–æ–ª—å–∫–æ –ø—Ä–∞–∫—Ç–∏–∫–∞ –∏ –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ. –ü–æ–¥–æ–π–¥—ë—Ç –¥–∞–∂–µ —Ç–µ–º, –∫—Ç–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–µ–ª–∞–ª —Ç–µ–π–ø–∏—Ä–æ–≤–∞–Ω–∏–µ.*\n\n"
                "*–°—Ç–æ–∏–º–æ—Å—Ç—å:* 1000 —Ä—É–±–ª–µ–π."
            )
            keyboard = [
                [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å ‚úÖ", callback_data="pay")],
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="show_lessons")]
            ]
            with open("lesson1.jpg", "rb") as photo:
                await query.message.reply_photo(
                    photo=photo,
                    caption=caption,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode="Markdown"
                )

        elif query.data == "pay":
            url = create_payment_link(
                amount_rub=1000,
                description="–£—Ä–æ–∫: –¢–µ–π–ø—ã –ø—Ä–æ—Ç–∏–≤ –æ—Ç—ë–∫–æ–≤",
                return_url="https://t.me/natural_face_bot",
                telegram_user_id=query.from_user.id
            )
            await query.message.reply_text(f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{url}", disable_web_page_preview=True)

    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–Ω–æ–ø–∫–∏: %s", e)
        await query.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç—ë–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
def create_payment_link(amount_rub, description, return_url, telegram_user_id):
    payment = Payment.create({
        "amount": {
            "value": f"{amount_rub:.2f}",
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": return_url
        },
        "capture": True,
        "description": description,
        "metadata": {
            "telegram_user_id": telegram_user_id
        }
    }, idempotency_key=str(uuid.uuid4()))
    return payment.confirmation.confirmation_url

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ä–æ–∫–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
async def send_lesson(user_id):
    try:
        message_text = (
            "–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –°–ø–∞—Å–∏–±–æ üíõ\n\n"
            "–ñ–µ–ª–∞—é —Ç–µ–±–µ –ø—Ä–∏—è—Ç–Ω–æ–π –∏ –ø–æ–ª–µ–∑–Ω–æ–π –ø—Ä–∞–∫—Ç–∏–∫–∏!"
        )

        await telegram_app.bot.send_message(chat_id=user_id, text=message_text)

        video_path = "urok_1_teipy_oteki.mp4"
        with open(video_path, "rb") as video:
            await telegram_app.bot.send_video(chat_id=user_id, video=video, caption="–£—Ä–æ–∫: –¢–µ–π–ø—ã –ø—Ä–æ—Ç–∏–≤ –æ—Ç—ë–∫–æ–≤ üé•")

        logger.info(f"‚úÖ –£—Ä–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")

    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É—Ä–æ–∫–∞: %s", e)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í–µ–±—Ö—É–∫ –Æ–∫–∞—Å—Å—ã ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
@app.post("/yookassa-webhook")
async def yookassa_webhook(request: Request, background_tasks: BackgroundTasks):
    try:
        data = await request.json()
        event = data.get("event")
        object_data = data.get("object", {})

        if event == "payment.succeeded":
            telegram_user_id = object_data.get("metadata", {}).get("telegram_user_id")
            if telegram_user_id:
                background_tasks.add_task(send_lesson, telegram_user_id)

    except Exception as e:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–µ–±—Ö—É–∫–∞ –æ—Ç –Æ–∫–∞—Å—Å—ã: %s", e)

    return {"ok": True}

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ #
telegram_app.add_handler(CommandHandler("start", start))
telegram_app.add_handler(CallbackQueryHandler(button_handler))
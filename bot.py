from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
from yookassa import Configuration, Payment
from fastapi import FastAPI, Request
import asyncio
import uuid
import logging
from threading import Thread

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ÆKassa
Configuration.account_id = '1111202'
Configuration.secret_key = 'live_ZH5lu2pWuE-NviXGnfdE3N4acMupaT8GcB8rbUHTPdY'

# Telegram —Ç–æ–∫–µ–Ω
TOKEN = "7945507873:AAFzT8i4DNdkNrvgQMd6mYQ8KhpL71Ngp1U"

# FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
fastapi_app = FastAPI()

# Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = ApplicationBuilder().token(TOKEN).build()

# --- –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å—Å—ã–ª–∫–∏ ---
def create_payment_link(amount_rub: int, description: str, return_url: str, telegram_user_id: int) -> str:
    payment = Payment.create({
        "amount": {
            "value": f"{amount_rub}.00",
            "currency": "RUB"
        },
        "confirmation": {
            "type": "redirect",
            "return_url": return_url
        },
        "capture": True,
        "description": description,
        "metadata": {
            "telegram_user_id": telegram_user_id
        }
    }, idempotence_key=str(uuid.uuid4()))

    return payment.confirmation.confirmation_url

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è! –ó–¥–µ—Å—å —è —Å–æ–±—Ä–∞–ª–∞ —Å–≤–æ–∏ –∞–≤—Ç–æ—Ä—Å–∫–∏–µ –≤–∏–¥–µ–æ—É—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –¥–æ–º–∞: –ø—Ä–æ—Å—Ç–æ, —É–¥–æ–±–Ω–æ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ üíÜ‚Äç‚ôÄÔ∏è\n\n"
        "–í–∏–¥–µ–æ—É—Ä–æ–∫–∏ –ø—Ä–∏–¥—É—Ç —Ç–µ–±–µ —Å—Ä–∞–∑—É –∂–µ –≤ —ç—Ç–æ—Ç –±–æ—Ç, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã. "
        "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —É—Ä–æ–∫ –∏ –Ω–∞—á–Ω–∏ –∑–∞–±–æ—Ç—É –æ —Å–µ–±–µ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å ‚ú®"
    )
    keyboard = [
        [InlineKeyboardButton("–°–º–æ—Ç—Ä–µ—Ç—å —É—Ä–æ–∫–∏", callback_data="show_lessons")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text, reply_markup=reply_markup)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "show_lessons":
        text = "*–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Ä–æ–∫–æ–≤‚ú®*\n\n‚ñ´Ô∏è–¢–ï–ô–ü–´ –ü–†–û–¢–ò–í –û–¢–Å–ö–û–í"
        keyboard = [
            [InlineKeyboardButton("–í—ã–±—Ä–∞—Ç—å —É—Ä–æ–∫ ‚úÖ", callback_data="lesson_1")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(text=text, reply_markup=reply_markup, parse_mode="Markdown")

    elif query.data == "lesson_1":
        photo_path = "lesson1.jpg"
        caption = "*–ß—Ç–æ —Ç–µ–±—è –∂–¥—ë—Ç –≤ —É—Ä–æ–∫–µ?*\n\n" \
                  "‚úîÔ∏è –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–∂–∏ –∫ —Ç–µ–π–ø–∏—Ä–æ–≤–∞–Ω–∏—é\n" \
                  "‚úîÔ∏è –ú–µ—Ä—ã –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ—Å—Ç–∏ –∏ –∫–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Ç–µ—Å—Ç –Ω–∞ –∞–ª–ª–µ—Ä–≥–∏—é\n" \
                  "‚úîÔ∏è –ö–∞–∫ –≤—ã—Ä–µ–∑–∞—Ç—å –∞–ø–ø–ª–∏–∫–∞—Ü–∏—é –æ—Ç –æ—Ç—ë–∫–æ–≤\n" \
                  "‚úîÔ∏è –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞ –Ω–∞–Ω–µ—Å–µ–Ω–∏—è —Ç–µ–π–ø–æ–≤\n" \
                  "‚úîÔ∏è –°–∫–æ–ª—å–∫–æ –Ω–æ—Å–∏—Ç—å —Ç–µ–π–ø—ã, —á—Ç–æ–±—ã –±—ã–ª —ç—Ñ—Ñ–µ–∫—Ç\n" \
                  "–ö–∞–∫ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ —Å–Ω—è—Ç—å –∞–ø–ø–ª–∏–∫–∞—Ü–∏—é, –Ω–µ –ø–æ–≤—Ä–µ–¥–∏–≤ –∫–æ–∂—É\n\n" \
                  "üé• –¢–æ–ª—å–∫–æ –ø—Ä–∞–∫—Ç–∏–∫–∞ –∏ –Ω–∏—á–µ–≥–æ –ª–∏—à–Ω–µ–≥–æ. –ü–æ–¥–æ–π–¥—ë—Ç –¥–∞–∂–µ —Ç–µ–º, –∫—Ç–æ –Ω–∏–∫–æ–≥–¥–∞ –Ω–µ –¥–µ–ª–∞–ª —Ç–µ–π–ø–∏—Ä–æ–≤–∞–Ω–∏–µ.\n\n" \
                  "*–°—Ç–æ–∏–º–æ—Å—Ç—å:* 1000 —Ä—É–±–ª–µ–π."
        keyboard = [
            [InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å ‚úÖ", callback_data="pay")],
            [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="show_lessons")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_photo(
            photo=open(photo_path, "rb"),
            caption=caption,
            reply_markup=reply_markup,
            parse_mode="Markdown"
        )

    elif query.data == "pay":
        payment_url = create_payment_link(
            amount_rub=1000,
            description="–£—Ä–æ–∫: –¢–µ–π–ø—ã –ø—Ä–æ—Ç–∏–≤ –æ—Ç—ë–∫–æ–≤",
            return_url="https://t.me/natural_face_bot",
            telegram_user_id=query.from_user.id
        )
        await query.message.reply_text(
            f"üîó –í–æ—Ç –≤–∞—à–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n{payment_url}",
            disable_web_page_preview=True
        )

# --- Webhook –¥–ª—è –ÆKassa ---
@fastapi_app.post("/webhook")

async def handle_yookassa_webhook(request: Request):
    data = await request.json()
    logging.info(f"Webhook –ø–æ–ª—É—á–µ–Ω: {data}")

    event = data.get("event")
    object_data = data.get("object", {})
    metadata = object_data.get("metadata", {})

    if event == "payment.succeeded":
        telegram_user_id = metadata.get("telegram_user_id")
        if telegram_user_id:
            try:
                await app.bot.send_message(
                    chat_id=telegram_user_id,
                    text="üéâ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í–æ—Ç –≤–∞—à –≤–∏–¥–µ–æ—É—Ä–æ–∫:\n[–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ —É—Ä–æ–∫ –∏–ª–∏ –≤–ª–æ–∂–µ–Ω–∏–µ]"
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é: {e}")

    return {"status": "ok"}

# --- –ó–∞–ø—É—Å–∫ Telegram-–±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ ---
def run_telegram_bot():
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.run_polling()

telegram_thread = Thread(target=run_telegram_bot)
telegram_thread.start()